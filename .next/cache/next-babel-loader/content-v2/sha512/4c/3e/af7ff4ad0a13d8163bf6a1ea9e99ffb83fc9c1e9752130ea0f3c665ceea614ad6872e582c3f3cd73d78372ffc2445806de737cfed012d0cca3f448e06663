{"ast":null,"code":"import { get } from \"lodash\";\nconst publicEnvB64 = process.env.NEXT_PUBLIC_ENV;\nconst privateEnvB64 = process.env.PRIVATE_ENV;\nconst publicEnv = JSON.parse(true ? Buffer.from(publicEnvB64, \"base64\").toString(\"utf-8\") : atob(publicEnvB64));\nconst privateEnvVal = JSON.parse(true ? Buffer.from(privateEnvB64, \"base64\").toString(\"utf-8\") : \"0\");\nexport const env = path => get(publicEnv, path);\nexport const privateEnv = path => {\n  if (!privateEnvVal) throw new Error(\"Cannot get private env values on the client-side!\");\n  return get(privateEnvVal, path);\n};","map":{"version":3,"sources":["/Users/brad/dev/docker-secrets/src/util/env.js"],"names":["get","publicEnvB64","process","env","NEXT_PUBLIC_ENV","privateEnvB64","PRIVATE_ENV","publicEnv","JSON","parse","Buffer","from","toString","atob","privateEnvVal","path","privateEnv","Error"],"mappings":"AAAA,SAASA,GAAT,QAAoB,QAApB;AAEA,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAR,CAAYC,eAAjC;AACA,MAAMC,aAAa,GAAGH,OAAO,CAACC,GAAR,CAAYG,WAAlC;AAEA,MAAMC,SAAS,GAAGC,IAAI,CAACC,KAAL,CAChB,OACIC,MAAM,CAACC,IAAP,CAAYV,YAAZ,EAA0B,QAA1B,EAAoCW,QAApC,CAA6C,OAA7C,CADJ,GAEIC,IAAI,CAACZ,YAAD,CAHQ,CAAlB;AAMA,MAAMa,aAAa,GAAGN,IAAI,CAACC,KAAL,CACpB,OACIC,MAAM,CAACC,IAAP,CAAYN,aAAZ,EAA2B,QAA3B,EAAqCO,QAArC,CAA8C,OAA9C,CADJ,GAEI,GAHgB,CAAtB;AAMA,OAAO,MAAMT,GAAG,GAAIY,IAAD,IAAUf,GAAG,CAACO,SAAD,EAAYQ,IAAZ,CAAzB;AACP,OAAO,MAAMC,UAAU,GAAID,IAAD,IAAU;AAClC,MAAI,CAACD,aAAL,EACE,MAAM,IAAIG,KAAJ,CAAU,mDAAV,CAAN;AACF,SAAOjB,GAAG,CAACc,aAAD,EAAgBC,IAAhB,CAAV;AACD,CAJM","sourcesContent":["import { get } from \"lodash\";\n\nconst publicEnvB64 = process.env.NEXT_PUBLIC_ENV;\nconst privateEnvB64 = process.env.PRIVATE_ENV;\n\nconst publicEnv = JSON.parse(\n  typeof window === \"undefined\"\n    ? Buffer.from(publicEnvB64, \"base64\").toString(\"utf-8\")\n    : atob(publicEnvB64)\n);\n\nconst privateEnvVal = JSON.parse(\n  typeof window === \"undefined\"\n    ? Buffer.from(privateEnvB64, \"base64\").toString(\"utf-8\")\n    : \"0\"\n);\n\nexport const env = (path) => get(publicEnv, path);\nexport const privateEnv = (path) => {\n  if (!privateEnvVal)\n    throw new Error(\"Cannot get private env values on the client-side!\");\n  return get(privateEnvVal, path);\n};\n"]},"metadata":{},"sourceType":"module"}